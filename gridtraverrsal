#include<bits/stdc++.h>

using namespace std;
const int N=2002;

//1)we have to find out if the coordinate is in the grid or not
//2)we have to find if the coordinate is a wall or not
//3)we have to find if the coordinate is visited or not.


pair<int,int>start,destination;

 int m,n;


int maze[N][N],visited[N][N];
int level[N][N];

int dx[]={0,0,-1,1};//coordinate movement to up down left and right.

int dy[]={1,-1,0,0};//coordinate movement to up down left and right.


bool is_valid(pair<int,int>cord)
{
    int x=cord.first;

    int y=cord.second;


    if(x>=0 && x<n&& y>=0 && y<m)
    {
        return true;
    }

    return false;
}

bool wall(pair<int,int>coord)
{
    int x=coord.first;
    int y=coord.second;

    if(maze[x][y]==-1)
    {
        return false;
    }

    return true;

}



void bfs(pair<int,int>src)
{
    queue<pair<int,int>>q;

    q.push(src);

    visited[src.first][src.second]=1;

    while(!q.empty())
    {
        pair<int,int>head=q.front();

        q.pop();

        int x=head.first;

        int y=head.second;

        for(int i=0;i<4;i++)
        {
            int new_x=x+dx[i];
            int new_y=y+dy[i];

            pair<int,int>adj_node={new_x,new_y};

            if(is_valid(adj_node) && wall(adj_node) && visited[new_x][new_y]==0)
            {

                visited[new_x][new_y]=1;

                level[new_x][new_y]=level[x][y]+1;

                q.push(adj_node);


            }

        }



    }



}

int main()
{


    cin>>n>>m;

    for(int i=0;i<n;i++)
    {
        string str;
        cin>>str;

        for(int j=0;j<m;j++)
        {
            if(str[j]=='#')
            {
                maze[i][j]=-1;
            }
            else if(str[j]=='A')
            {

                start={i,j};

            }
            else if(str[j]=='B')
            {
                destination={i,j};
            }


        }
    }

    bfs(start);


    // for(int i=0;i<n;i++)
    // {
    //     for(int j=0;j<m;j++)
    //     {
    //         cout<<maze[i][j]<<" ";
    //     }
    //     cout<<endl;
    // }

    // cout<<endl;



    if(visited[destination.first][destination.second]==1)
    {
        cout<<"YES\n";
        cout<<level[destination.first][destination.second];
    }

    else
    {
        cout<<"NO\n";
    }
}

// 5 8
// ########
// #.A#...#
// #.##.#B#
// #......#
// ########
